#!/bin/bash
PROG="${0##*/}"
CWD=$(pwd -P)
FORCE=0

# Make sure
test -z "${BASH_SOURCE}" && exec bash "$0" "$1" "$2" "$3" "$4" "$5"

## this code snippet is taken from Dan Dascalescu's response on
## http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]
do
        # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
PDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd -P )"
## end


PASSFILE=${PDIR}/accounts.txt

usage() {
	echo -e "${PROG} - local password manager\n"
	echo -e "usage:\n\$ ${PROG} (options) {search-string}"
	echo -e "\t-c, --clear-authcache\t Clears the gpg auth-cache"
	echo -e "\t-f, --force-sync \t Force an update with the remote"
	echo -e "\t-e, --edit\t\t Edit the local auth store"
	echo -e "\t-h, --help\t\t this help.\n"
	exit 1
}

uncache() {
	AUTHPID=$(pgrep -u ${USER} gpg-agent)
	if [ -n "${AUTHPID//[^0-9]/}" ]
	then
		#valid PID, so we can:
		echo RELOADAGENT | gpg-connect-agent
		exit 0
	fi
	
	#fall through
	echo "Can't discover running gpg-agent"
	exit 1
}

is_remote() {
	# Re-check for tunneled ssh first:
	RURL=$(set -o pipefail; git config --get remote.origin.url | egrep -o -- '@.*:[0-9]{2,5}' | cut -f2 -d:)
	if [ $? -eq 0 ]
	then
		# remote.origin.url is defined, so we're remote and need to push
		PORT=$(set -o pipefail; pgrep -a -x ssh | egrep -o "${RURL}:" | cut -f 1 -d:)
		if [ ${PORT:-0} -ne 0 ];
		then
			# echo "sync with remote:"
			REMOTE=1
		else
			# remote is not available
			echo -e "remote repository is not available: "
			git config --get remote.origin.url
			echo "unable to synchronize"
			REMOTE=0
		fi
	elif [ -n "$( set -o pipefail; git config --get remote.origin.url | egrep -o -- '@[-a-zA-Z0-9.]*:?/' )" ]
	then
		REMOTE=1
	else
		# remote.origin.url is undefined, assume local
		REMOTE=0
	fi
}

pull() {
	cd ${PDIR}

	# always check
	is_remote

	if [ ${REMOTE:-0} -eq 1 ];
	then
		NOW=$(date "+%s")
		AGE=$(stat  --format="%Y" ${PDIR}/.git/FETCH_HEAD)
		if [ ${FORCE:-1} -eq 1 -o $((AGE + 3600)) -lt ${NOW} ]	# 1 hour cache
		then
			# echo "sync with remote:"
			git pull
		fi
	fi
	cd "${CWD}"
}

push() {
	cd ${PDIR}
#	git diff --quiet
	DIFFER=$(git show 2>&1 | grep differ | wc -l)
	if [ ${DIFFER:-1} -gt 0 -o ${FORCE:-0} -eq 1 ]
	then
		git commit -a -m "lpass update for $(date '+%YmdHS')"

		# always check
		is_remote

		if [ ${REMOTE:-0} -eq 1 ];
		then
			# echo "sync with remote:"
			git push
		fi
	else
		echo "no local changes require synching"
	fi
	cd "${CWD}"
}

decrypt() {
	pull
	test -r ${PASSFILE}.gpg && \
		gpg -o ${PASSFILE} -d ${PASSFILE}.gpg
	return $?
}

edit() {
    decrypt && \
        A1=$(stat  --format="%Y" ${PASSFILE}) && \
	joe ${PASSFILE} && \
	A2=$(stat  --format="%Y" ${PASSFILE}) && \
	if [ ${A1} -eq ${A2} ];
	then
		rm -f ${PASSFILE}
	else
		crypt && \
		push
	fi

	exit 0
}
		
crypt() {
        test -r ${PASSFILE} && \
                gpg -o ${PASSFILE}.gpg -c ${PASSFILE}
        test -r ${PASSFILE}.gpg && \
            test ${PASSFILE}.gpg -nt ${PASSFILE} && \
                rm -f ${PASSFILE} ${PASSFILE}~
	return $?
}

optspec=":fceh-"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    usage
                    ;;
                edit)
                    edit 
                    ;;
                clear-authcache)
                    uncache
                    ;;
                force-sync)
                    FORCE=1
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        c)
            uncache
            ;;
        h)
            usage
            ;;
        e)
            edit
            ;;
        f)
            FORCE=1
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done
SEARCH="${!OPTIND}"

# Always
pull

if [ ${FORCE:-0} -eq 1 ]
then
	push
fi

if [ -z "${SEARCH}" ]
then
	usage
fi

test -r ${PASSFILE}.gpg && \
	STRING=$( gpg -o - -d ${PASSFILE}.gpg 2>/dev/null | egrep -i -A 3 "$SEARCH" )

if [ -z "${STRING}" ];
then
	echo "n/a"
else
	echo ${STRING}
fi

